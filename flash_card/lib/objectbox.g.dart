// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again
// with `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'repo/models/flash_card_model.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
      id: const obx_int.IdUid(1, 7916660423879946336),
      name: 'FlashCard',
      lastPropertyId: const obx_int.IdUid(13, 8776231869715504801),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 9162569464758638157),
            name: 'id',
            type: 6,
            flags: 129),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 8062346015727682522),
            name: 'synonyms',
            type: 30,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 9194612759747734491),
            name: 'word',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 5082641222951489697),
            name: 'imageURL',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 5161211904907517395),
            name: 'audio',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 8954753790303801205),
            name: 'definition',
            type: 30,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(10, 2743650312735533332),
            name: 'antonyms',
            type: 30,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(11, 8427263615584376166),
            name: 'stems',
            type: 30,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(12, 2883366726882652111),
            name: 'isFavorite',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(13, 8776231869715504801),
            name: 'isLearned',
            type: 1,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[])
];

/// Shortcut for [obx.Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [obx.Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore(
    {String? directory,
    int? maxDBSizeInKB,
    int? maxDataSizeInKB,
    int? fileMode,
    int? maxReaders,
    bool queriesCaseSensitiveDefault = true,
    String? macosApplicationGroup}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(getObjectBoxModel(),
      directory: directory ?? (await defaultStoreDirectory()).path,
      maxDBSizeInKB: maxDBSizeInKB,
      maxDataSizeInKB: maxDataSizeInKB,
      fileMode: fileMode,
      maxReaders: maxReaders,
      queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
      macosApplicationGroup: macosApplicationGroup);
}

/// Returns the ObjectBox model definition for this project for use with
/// [obx.Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
      entities: _entities,
      lastEntityId: const obx_int.IdUid(1, 7916660423879946336),
      lastIndexId: const obx_int.IdUid(0, 0),
      lastRelationId: const obx_int.IdUid(0, 0),
      lastSequenceId: const obx_int.IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [
        5723617682574621536,
        180507574736558726,
        2990859485798090787
      ],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, obx_int.EntityDefinition>{
    FlashCard: obx_int.EntityDefinition<FlashCard>(
        model: _entities[0],
        toOneRelations: (FlashCard object) => [],
        toManyRelations: (FlashCard object) => {},
        getId: (FlashCard object) => object.id,
        setId: (FlashCard object, int id) {
          object.id = id;
        },
        objectToFB: (FlashCard object, fb.Builder fbb) {
          final synonymsOffset = object.synonyms == null
              ? null
              : fbb.writeList(object.synonyms!
                  .map(fbb.writeString)
                  .toList(growable: false));
          final wordOffset = fbb.writeString(object.word);
          final imageURLOffset = object.imageURL == null
              ? null
              : fbb.writeString(object.imageURL!);
          final audioOffset =
              object.audio == null ? null : fbb.writeString(object.audio!);
          final definitionOffset = object.definition == null
              ? null
              : fbb.writeList(object.definition!
                  .map(fbb.writeString)
                  .toList(growable: false));
          final antonymsOffset = object.antonyms == null
              ? null
              : fbb.writeList(object.antonyms!
                  .map(fbb.writeString)
                  .toList(growable: false));
          final stemsOffset = object.stems == null
              ? null
              : fbb.writeList(
                  object.stems!.map(fbb.writeString).toList(growable: false));
          fbb.startTable(14);
          fbb.addInt64(0, object.id);
          fbb.addOffset(3, synonymsOffset);
          fbb.addOffset(4, wordOffset);
          fbb.addOffset(5, imageURLOffset);
          fbb.addOffset(7, audioOffset);
          fbb.addOffset(8, definitionOffset);
          fbb.addOffset(9, antonymsOffset);
          fbb.addOffset(10, stemsOffset);
          fbb.addBool(11, object.isFavorite);
          fbb.addBool(12, object.isLearned);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final wordParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 12, '');
          final imageURLParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 14);
          final audioParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 18);
          final definitionParam = const fb.ListReader<String>(
                  fb.StringReader(asciiOptimization: true),
                  lazy: false)
              .vTableGetNullable(buffer, rootOffset, 20);
          final synonymsParam = const fb.ListReader<String>(
                  fb.StringReader(asciiOptimization: true),
                  lazy: false)
              .vTableGetNullable(buffer, rootOffset, 10);
          final antonymsParam = const fb.ListReader<String>(
                  fb.StringReader(asciiOptimization: true),
                  lazy: false)
              .vTableGetNullable(buffer, rootOffset, 22);
          final stemsParam = const fb.ListReader<String>(
                  fb.StringReader(asciiOptimization: true),
                  lazy: false)
              .vTableGetNullable(buffer, rootOffset, 24);
          final isFavoriteParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 26);
          final isLearnedParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 28);
          final object = FlashCard(
              word: wordParam,
              imageURL: imageURLParam,
              audio: audioParam,
              definition: definitionParam,
              synonyms: synonymsParam,
              antonyms: antonymsParam,
              stems: stemsParam,
              isFavorite: isFavoriteParam,
              isLearned: isLearnedParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

          return object;
        })
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [FlashCard] entity fields to define ObjectBox queries.
class FlashCard_ {
  /// See [FlashCard.id].
  static final id =
      obx.QueryIntegerProperty<FlashCard>(_entities[0].properties[0]);

  /// See [FlashCard.synonyms].
  static final synonyms =
      obx.QueryStringVectorProperty<FlashCard>(_entities[0].properties[1]);

  /// See [FlashCard.word].
  static final word =
      obx.QueryStringProperty<FlashCard>(_entities[0].properties[2]);

  /// See [FlashCard.imageURL].
  static final imageURL =
      obx.QueryStringProperty<FlashCard>(_entities[0].properties[3]);

  /// See [FlashCard.audio].
  static final audio =
      obx.QueryStringProperty<FlashCard>(_entities[0].properties[4]);

  /// See [FlashCard.definition].
  static final definition =
      obx.QueryStringVectorProperty<FlashCard>(_entities[0].properties[5]);

  /// See [FlashCard.antonyms].
  static final antonyms =
      obx.QueryStringVectorProperty<FlashCard>(_entities[0].properties[6]);

  /// See [FlashCard.stems].
  static final stems =
      obx.QueryStringVectorProperty<FlashCard>(_entities[0].properties[7]);

  /// See [FlashCard.isFavorite].
  static final isFavorite =
      obx.QueryBooleanProperty<FlashCard>(_entities[0].properties[8]);

  /// See [FlashCard.isLearned].
  static final isLearned =
      obx.QueryBooleanProperty<FlashCard>(_entities[0].properties[9]);
}
